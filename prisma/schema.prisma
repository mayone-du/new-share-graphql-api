generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

generator nexusPrisma {
  provider = "nexus-prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  DEVELOPER
  USER
}

enum Status {
  ACTIVE
  INACTIVE
  DELETED
}

model User {
  id               BigInt   @id @default(autoincrement())
  oauthUserId      String   @unique
  username         String   @unique
  displayName      String
  selfIntroduction String
  photoUrl         String
  email            String   @unique // @ignoreとするとclient側で参照させないようにできる。が、バグがあるため使わない https://github.com/prisma/prisma/issues/11283
  role             Role     @default(USER)
  status           Status   @default(ACTIVE) // なんとなくつけただけ
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  signInCount      Int      @default(0)
  likes            Like[]
  newsList         News[]
  // shortcuts        Shortcut[]
}

// model Shortcut {
//   id          BigInt   @id @default(autoincrement())
//   name        String
//   description String?
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
//   userId      BigInt
//   User        User     @relation(fields: [userId], references: [id])
// }

model News {
  id          BigInt   @id @default(autoincrement())
  url         String // ニュースのURL
  title       String // タイトル
  description String // 概要
  imageUrl    String? // サムネ用の画像URL
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sharedAt    DateTime @default(now()) // シェアする日。
  isViewed    Boolean  @default(false) // ニュースを読んだかどうか
  isImportant Boolean  @default(false) // 重要なニュース(是非見てほしいニュース)かどうか
  likes       Like[]
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      BigInt
}

model Like {
  id        BigInt   @id @default(autoincrement())
  newsId    BigInt
  news      News     @relation(fields: [newsId], references: [id], onDelete: Cascade)
  userId    BigInt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  isLiked   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([newsId, userId])
}

model SlackNotification {
  id        BigInt   @id @default(autoincrement())
  isSent    Boolean  @default(true) // Slackに送信したか
  createdAt DateTime @default(now()) // 送信日時
  updatedAt DateTime @updatedAt
}

// TODO: QinTV用のメモやニュースのテーブルを検討
// model NewsMemo {
//   id        BigInt   @id @default(autoincrement())
//   newsId    BigInt   @unique
//   News      News     @relation(fields: [newsId], references: [id], onDelete: Cascade)
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }
